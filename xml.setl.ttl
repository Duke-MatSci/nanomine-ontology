@prefix rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:          <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:           <http://www.w3.org/2001/XMLSchema#> .
@prefix owl:           <http://www.w3.org/2002/07/owl#> .
@prefix skos:          <http://www.w3.org/2004/02/skos/core#> .
@prefix prov:          <http://www.w3.org/ns/prov#> .
@prefix sio:           <http://semanticscience.org/resource/> .
@prefix dcat:          <http://www.w3.org/ns/dcat#> .
@prefix dcterms:       <http://purl.org/dc/terms/> .
@prefix void:          <http://rdfs.org/ns/void#> .
@prefix foaf:          <http://xmlns.com/foaf/0.1/> .
@prefix ov:            <http://open.vocab.org/terms/> .
@prefix setl:          <http://purl.org/twc/vocab/setl/> .
@prefix csvw:          <http://www.w3.org/ns/csvw#> .
@prefix pv:            <http://purl.org/net/provenance/ns#>.
@prefix sp:            <http://spinrdf.org/sp#>.

@prefix :              <http://nanomine.tw.rpi.edu/setl/xml/> .

@prefix nanopub: <http://www.nanopub.org/nschema#> .

:nanomine_xml a setl:XML;
  prov:wasGeneratedBy [
    a setl:Extract;
  ].

:property_classes_table a csvw:Table, setl:Table;
  prov:wasGeneratedBy [
    a setl:Extract;
    prov:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1806836834>;
  ].

:nanopubs a void:Dataset, dcat:Dataset;
  prov:wasGeneratedBy [
    a setl:Transform, setl:JSLDT;
    prov:used :nanomine_xml;
    prov:qualifiedUsage [ a prov:Usage; prov:entity :property_classes_table; prov:hadRole [ dcterms:identifier "properties"]];
    setl:hasContext '''{
  "dataset" : "https://hbgd.tw.rpi.edu/dataset/",
  "sio" :     "http://semanticscience.org/resource/",
  "chear" :   "http://hadatac.org/ont/chear#",
  "skos" :    "http://www.w3.org/2004/02/skos/core#",
  "dcterms" :    "http://purl.org/dc/terms/",
  "prov" :    "http://www.w3.org/ns/prov#",
  "rdfs" :    "http://www.w3.org/2000/01/rdf-schema#",
  "doi" :    "http://dx.doi.org/",
  "nanomine" :    "http://nanomine.tw.rpi.edu/ns/",
  "unit" :    "http://nanomine.tw.rpi.edu/ns/unit/",
  "author" :    "http://nanomine.tw.rpi.edu/author/",
  "publication" :    "http://nanomine.tw.rpi.edu/publication/",
  "bibo" : "http://purl.org/ontology/bibo/",
  "foaf" : "http://xmlns.com/foaf/0.1/",
  "nanopub" :    "http://www.nanopub.org/nschema#",
  "entry" :    "http://nanomine.tw.rpi.edu/entry/",
  "sample" :    "http://nanomine.tw.rpi.edu/sample/",
  "compound" :    "http://nanomine.tw.rpi.edu/compound/",
  "location" :    "http://nanomine.tw.rpi.edu/location/",
  "lang" :    "http://nanomine.tw.rpi.edu/language/",
  "void" :    "http://rdfs.org/ns/void#",
  "dcat" : "http://www.w3.org/ns/dcat#"
}''';
    prov:value """[{
    "@for": "id in row.findall('ID')",
    "@do": {
      "@if" : "id.text is not None",
      "@id": "entry:{{slugify(id.text)}}",
      "@graph": [
        {
          "@id": "entry:{{id.text}}",
          "@type" : "nanopub:Nanopublication",
          "nanopub:hasAssertion" : {
            "@id": "entry:{{id.text}}_assertion",
            "@type": "nanopub:Assertion",
            "@graph" : [
              {
                "@id" : "sample:{{slugify(id.text)}}",
                "@type" : [
                  "nanomine:PolymerNanocomposite"
                ],
                "sio:hasComponentPart" : [
                  { "@for" : "fc, particle in enumerate(row.findall('MATERIALS/Filler/FillerComponent'))",
                    "@do" : {
                      "@id" : "sample:{{slugify(id.text)}}_filler_{{fc}}",
                      "@type" : [
                        {
                          "@if" : "particle.find('ChemicalName').text is not None",
                          "@id" : "compound:{{camelcase(particle.find('ChemicalName').text)}}",
                          "@type" : "owl:Class",
                          "rdfs:label" : "{{particle.find('ChemicalName').text}}"
                        },
                        {
                          "@if" : "particle.find('ChemicalName').text is None",
                          "@id" : "compound:{{camelcase(particle.find('Abbreviation').text)}}",
                          "@type" : "owl:Class",
                          "rdfs:label" : "{{particle.find('Abbreviation').text}}"
                        }
                      ],
                      "sio:hasRole" : {
                        "@type" : "nanomine:Filler",
                        "sio:inRelationTo" : { "@id" : "sample:{{slugify(id.text)}}"}
                      },
                      "sio:hasAttribute" : [
                        {
                          "@if" : "particle.find('Density')",
                          "@for" : "density in particle.findall('Density')",
                          "@do" : {
                            "@type" : "sio:Density",
                            "sio:hasValue" : {
                                "@value" : "{{density.find('value').text}}",
                                "@type" : "xsd:decimal"
                              },
                            "sio:hasUnit" : [
                              { "@if" : "density.find('unit')",
                                "@id" : "unit:{{slugify(density.find('unit').text)}}",
                                "rdfs:label" : "{{density.find('unit').text}}"
                              }
                            ]
                          }
                        },
                        {
                          "@if" : "particle.find('SpecificSurfaceArea') is not None",
                          "@for" : "area in particle.findall('SpecificSurfaceArea')",
                          "@do" : {
                            "@type" : "sio:SurfaceArea",
                            "sio:hasValue" : {
                                "@value" : "{{area.find('value').text}}",
                                "@type" : "xsd:decimal"
                              },
                            "sio:hasUnit" : [
                              { "@if" : "area.find('unit') is not None",
                                "@id" : "unit:{{slugify(area.find('unit').text)}}",
                                "rdfs:label" : "{{area.find('unit').text}}"
                              }
                            ],
                            "sio:hasAttribute" : [
                              {
                                "@if" : "area.find('.//uncertainty')",
                                "@type" : [
                                  "sio:UncertaintyValue",
                                  { "@if" : "area.find('.//uncertainty/type').text == 'fraction'", "@id" : "sio:Ratio" },
                                  { "@if" : "area.find('.//uncertainty/type').text == 'amount'", "@id" : "sio:StandardDeviation" }
                                ],
                                "sio:hasValue" : { "@value" : "{{area.find('.//uncertainty/value').text}}", "@type" : "xsd:decimal"}
                              }
                            ]
                          }
                        },
                        {
                          "@for" : "ratio in particle.findall('ParticleAspectRatio')",
                          "@do" : {
                            "@type" : "sio:AspectRatio",
                            "sio:hasValue" : {
                                "@value" : "{{ratio.find('value').text}}",
                                "@type" : "xsd:decimal"
                              },
                            "sio:hasUnit" : [
                              { "@if" : "ratio.find('unit') is not None",
                                "@id" : "unit:{{slugify(ratio.find('unit').text)}}",
                                "rdfs:label" : "{{ratio.find('unit').text}}"
                              }
                            ],
                            "sio:hasAttribute" : [
                              {
                                "@if" : "ratio.find('.//uncertainty')",
                                "@type" : [
                                  "sio:UncertaintyValue",
                                  { "@if" : "ratio.find('.//uncertainty/type').text == 'fraction'", "@id" : "sio:Ratio" },
                                  { "@if" : "ratio.find('.//uncertainty/type').text == 'amount'", "@id" : "sio:StandardDeviation" }
                                ],
                                "sio:hasValue" : { "@value" : "{{ratio.find('.//uncertainty/value').text}}", "@type" : "xsd:decimal"}
                              }
                            ]
                          }
                        },
                        {
                          "@for" : "size in particle.findall('ParticleSize')",
                          "@do" : {
                            "@type" : "sio:Width",
                            "sio:hasValue" : {
                                "@value" : "{{size.find('value').text}}",
                                "@type" : "xsd:decimal"
                              },
                            "sio:hasUnit" : [
                              { "@if" : "size.find('unit') is not None",
                                "@id" : "unit:{{slugify(size.find('unit').text)}}",
                                "rdfs:label" : "{{size.find('unit').text}}"
                              }
                            ],
                            "sio:hasAttribute" : [
                              {
                                "@if" : "size.find('.//uncertainty') is not None",
                                "@type" : [
                                  "sio:UncertaintyValue",
                                  { "@if" : "size.find('.//uncertainty/type').text == 'fraction'", "@id" : "sio:Ratio" },
                                  { "@if" : "size.find('.//uncertainty/type').text == 'amount'", "@id" : "sio:StandardDeviation" }
                                ],
                                "sio:hasValue" : { "@value" : "{{size.find('.//uncertainty/value').text}}", "@type" : "xsd:decimal"}
                              }
                            ]
                          }
                        },
                        {
                          "@for" : "phase in particle.findall('CrystalPhase')",
                          "@do" : {
                            "@type" : [
                              "nanomine:CrystalPhase",
                              {
                                  "@id" : "nanomine:{{camelcase(phase.text)}}",
                                  "@type" : "owl:Class",
                                  "rdfs:label" : "{{phase.text}}",
                                  "rdfs:subClassOf" : {"@id":"nanomine:CrystalPhase"}
                              }
                            ]
                          }
                        }
                      ],
                      "sio:isSurroundedBy" : [
                        { "@for" : "surface in particle.findall('ParticleSurfaceTreatment/item') if len(particle.findall('ParticleSurfaceTreatment/item')) > 0 else particle.findall('ParticleSurfaceTreatment')",
                          "@do" : {
                            "@id" : "sample:{{slugify(id.text)}}_filler_{{fc}}_surfacetreatment",
                            "@type" : [
                              {
                                "@if" : "surface.find('ChemicalName').text is not None",
                                "@id" : "compound:{{camelcase(surface.find('ChemicalName').text)}}",
                                "@type" : "owl:Class",
                                "rdfs:label" : "{{surface.find('ChemicalName').text}}"
                              },
                              {
                                "@if" : "surface.find('ChemicalName').text is None",
                                "@id" : "compound:{{camelcase(surface.find('Abbreviation').text)}}",
                                "@type" : "owl:Class",
                                "rdfs:label" : "{{surface.find('Abbreviation').text}}"
                              }
                            ],
                            "sio:hasRole" : {
                              "@type" : "nanomine:SurfaceTreatment",
                              "sio:inRelationTo" : {"@id":"sample:{{slugify(id.text)}}"}
                            }
                          }
                        }
                      ]
                    }
                  },
                  { "@for" : "polymer in row.findall('MATERIALS/Matrix/MatrixComponent')",
                    "@do" : {
                      "@id" : "sample:{{slugify(id.text)}}_matrix",
                      "@type" : [
                        {
                          "@if" : "polymer.find('ChemicalName').text is not None",
                          "@id" : "compound:{{camelcase(polymer.find('ChemicalName').text)}}",
                          "@type" : "owl:Class",
                          "rdfs:label" : "{{polymer.find('ChemicalName').text}}"
                        },
                        {
                          "@if" : "polymer.find('ChemicalName').text is None",
                          "@id" : "compound:{{camelcase(polymer.find('Abbreviation').text)}}",
                          "@type" : "owl:Class",
                          "rdfs:label" : "{{polymer.find('Abbreviation').text}}"
                        }
                      ],
                      "sio:hasRole" : {
                        "@type" : "nanomine:Matrix",
                        "sio:inRelationTo" : {"@id":"sample:{{slugify(id.text)}}"}
                      }
                    }
                  }
                ],
                "@reverse": {
                  "prov:specializationOf" : [
                    {
                      "@for" : "i, property in properties.iterrows()",
                      "@do" : {
                         "@if" : "not isempty(property.xpath) and row.find('PROPERTIES')",
                         "@for" : "table in row.find('PROPERTIES').findall('.'+property.xpath+'//data')",
                         "@do" : {
                             "@for" : "row in table.findall('rows/row/item')",
                             "@do" : [
                               {
                                 "@id" : "sample:{{slugify(id.text)}}_{{slugify(property.uri)}}_{{row.find('key').text}}",
                                 "@type" : [
                                   "nanomine:PolymerNanocomposite"
                                 ],
                                 "sio:hasAttribute" : [
                                   {
                                     "@type" : "{{property.uri}}",
                                     "sio:hasValue" : { "@value" : "{{row.findall('column/item/key')[2].text}}", "@type": "xsd:decimal"}
                                   },
                                   {
                                     "@type" : [
                                       {
                                         "@if" : "not isempty(property.curveIndependentVar)",
                                         "@id" : "{{property.curveIndependentVar}}"
                                       },
                                       {
                                         "@if" : "isempty(property.curveIndependentVar)",
                                         "@id" : "nanomine:{{camelcase(table.findall('headers/column/item/key')[0].text)}}",
                                         "@type" : "owl:Class",
                                         "rdfs:subClassOf" : {"@id" : "sio:Quantity"},
                                         "rdfs:label" : "{{table.findall('headers/column/item/key')[0].text}}"
                                       }
                                     ],
                                     "sio:hasValue" : { "@value" : "{{row.findall('column/item/key')[0].text}}", "@type": "xsd:decimal"}
                                   }
                                 ]
                               }
                             ]
                         }
                       }
                     }
                  ]
                },
                "sio:hasAttribute" : [
                  {
                    "@for" : "i, property in properties.iterrows()",
                    "@do" : {
                      "@if" : "not isempty(property.xpath) and row.find('PROPERTIES') and not row.find('PROPERTIES').findall('.'+property.xpath+'/data')",
                      "@for" : "value in row.find('PROPERTIES').findall('.'+property.xpath)",
                      "@do" : [
                       {
                        "@type" : "{{property.uri}}",
                        "dc:description" : [
                          { "@if" : "value.find('description') is not None", "@value" : "{{value.find('description').text}}"}
                        ],
                        "sio:hasValue" : [
                          {
                            "@if" : "value.find('value') is not None",
                            "@value" : "{{value.find('value').text}}",
                            "@type" : "xsd:decimal"
                          }
                        ],
                        "sio:hasUnit" : [
                          { "@if" : "value.find('unit') is not None",
                            "@id" : "unit:{{slugify(value.find('unit').text)}}",
                            "rdfs:label" : "{{value.find('unit').text}}"
                          }
                        ],
                        "sio:hasAttribute" : [
                          {
                            "@for" : "uncertainty in value.findall('uncertainty')",
                            "@do" : {
                              "@type" : [
                                "sio:UncertaintyValue",
                                { "@if" : "uncertainty.find('type').text == 'fraction'", "@id" : "sio:Ratio" },
                                { "@if" : "uncertainty.find('type').text == 'amount'", "@id" : "sio:StandardDeviation" }
                              ],
                              "sio:hasValue" : { "@value" : "{{uncertainty.find('value').text}}", "@type" : "xsd:decimal"}
                            }
                          }
                        ]
                       }
                      ]
                    }
                  }
                ]
              }
            ]
          },
          "nanopub:hasProvenance" : {
            "@id": "entry:{{id.text}}_provenance",
            "@type": "nanopub:Provenance",
            "@graph" : [
            ]
          },
          "nanopub:hasPublicationInfo" : {
            "@id": "entry:{{id.text}}_pubinfo",
            "@type": "nanopub:PublicationInfo",
            "@graph" : [
              {
                "@for" : "citation in row.findall('DATA_SOURCE/Citation')",
                "@do" : {
                  "@id" : "entry:{{id.text}}_assertion",
                  "prov:generatedAtTime" : [
                    {
                      "@if" : "citation.find('CommonFields/DateOfCitation')",
                      "@type" : "xsd:date",
                      "@value" : "{{citation.find('CommonFields/DateOfCitation').text"
                    }
                  ],
                  "prov:wasQuotedFrom" : [
                    {
                      "@id" :  "doi:{{citation.find('CommonFields/DOI').text}}",
                      "@type" : [
                        "dcterms:BibliographicResource",
                        { "@id" : "{{ {'research article':'nanomine:ResearchArticle','conference proceeding':'nanomine:ProceedingsArticle','communication':'nanomine:Communication','review':'nanomine:ReviewArticle','letter':'bibo:Letter','technical comment':'nanomine:TechnicalComment'}[citation.find('CommonFields/CitationType').text] }}"}
                      ],
                        "dcterms:title" : "{{citation.find('CommonFields/Title').text}}",
                        "rdfs:seeAlso" : {
                          "@if" : "citation.find('CommonFields/URL').text",
                          "@id" : "{{citation.find('CommonFields/URL').text}}"
                        },
                        "dcterms:created" : {
                          "@value" : "{{citation.find('CommonFields/PublicationYear').text}}",
                          "@type" : "xsd:integer"
                        },
                        "bibo:volume" : {
                          "@if" : "citation.find('CommonFields/Volume').text",
                          "@value" : "{{citation.find('CommonFields/Volume').text}}",
                          "@type" : "xsd:integer"
                        },
                        "dcterms:language" : {
                          "@if" : "citation.find('CommonFields/Language').text",
                          "@id" : "lang:{{slugify(citation.find('CommonFields/Language').text)}}",
                          "@type" : "dcterms:LinguisticSystem",
                          "rdfs:label" : "{{citation.find('CommonFields/Language').text}}"
                        },
                        "dcterms:creator" : [
                          {
                            "@for" : "author in citation.findall('CommonFields/Author/item')",
                            "@do" : 
                              {
                                "@id" : "author:{{slugify(author.text)}}",
                                "@type" : "prov:Agent",
                                "foaf:name" : "{{author.text}}"
                              }
                          }
                        ],
                        "dcterms:isPartOf" : {
                          "@id" : "publication:{{slugify(citation.find('CommonFields/Publication').text)}}",
                          "dcterms:title" : "{{citation.find('CommonFields/Publication').text}}",
                          "dcterms:publisher" : {
                            "@if" : "citation.find('CommonFields/Publisher').text",
                            "@id" : "publisher:{{slugify(citation.find('CommonFields/Publisher').text)}}",
                            "rdfs:label" : "{{citation.find('CommonFields/Publisher').text}}",
                            "prov:atLocation" : {
                              "@if" : "citation.find('CommonFields/Location').text",
                              "@type" : "dcterms:Location",
                              "@id" : "location:{{slugify(citation.find('CommonFields/Location').text)}}",
                              "rdfs:label" : "{{citation.find('CommonFields/Location').text}}"
                            }
                          }
                        },
                        "dcat:keyword" : [
                          {
                            "@for" : "keyword in citation.findall('CommonFields/Keyword')",
                            "@do" : [
                              {
                                "@if" : "';' in keyword.text",
                                "@for" : "k in re.split('\\\\s*[;]\\\\s*', keyword.text)",
                                "@do" : "{{k.strip().title()}}"
                              },
                              {
                                "@if" : "';' not in keyword",
                                "@value" : "{{keyword.text.strip().title()}}"
                              }
                            ]
                          }
                        ]
                      }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
]"""
  ].
